............................................................................................................................................................................
                                                   Подход к языку програмирования
                                                   ------------------------------
1))) Базовые элементы
Базовыми элементами в языке программирования являются низкоуровневые операторы, например:
    типовые операторы
        "int", "char", "byte", "boolean", "long", "short"
        "new", "class", "interface", "abstarct"
    модификаторы доступа
        "public", "private", "protected", "static", "final"
    логические операторы
        "+", "-", "*", "/", "%", "^", "=", "+=", "-=", "<", ">", "!", "<=", ">=",  "==", "!=", "&&",  "||", "?/:"
    побитовые операторы
        "<<", ">>", ">>>"
    условные операторы (выражения)
        "if/else", "switch/case/breack", "for/while", "try/catch/finally", "import", "package"
    (другие операторы)
        "throws", "extends", "implements"

Оператор - это специальная макро-команда, которая интуитивно выполняет ряд машинных микро-операций на физическом уровне...
Одни операторы служат для того чтобы создавать (виделять область) определенный тип (структуру) объектов в оперативной памяти...
Другие операторы служат для того чтобы выполнять логические операции над данными (складывать числа, делать контенацию строк, приведить типы данных, сравнивать значения)...
Третие операторы служат для выполнения законов объектно-ориентированного программирования...
А каждая строка кода состоящая из операторов - является инструкцией программы, которая поддерживает свой синтаксис и выполняется с конца (с права на лево)

Таким образом, если в спецификации языка программирования указано назначение конкретного оператора - это значит что все по спецификации микро-команды полностью будут выполнены.
Например:
- "extends" - по законам ООП выполнит наследование/полиморфизм/инкапсуляцию (по инструкциям в коде...)
- "new", "class" - выделит в оператовной области памяти место и физически создаст в нем определеную структуру объекта...
- "=" - выполнит приведение физического значения из оперативной и присвоит его переменной (и если нужно машинально микро-команда выполнит приведение типов "A=A")...

2))) Расширенные элементы
Возможности объектно-ориентированного языка программирования позволяют переопределять-создавать новые типы данных и высокоуровневые команды (функции).
Например:
- собственная структура классов с конкретным поведением
- определять собственные высокоуровневые операторы

Паттерны проектирования - это программная модель по реализации конкретной задачи.
Подход к программированию через паттерны проектирования обеспечивает высокую надежность работы программы.
Все пользовательские (высокоуровневые) библиотеки в ООП-языке программирования разработы с помощью паттернов проектирования.
И даже клиентский GUI-интерфейс (и его элементы) также разработы на базе паттернов проектирования.

- Чтобы увеличить скорость обработки данных и сэкономить траты времени на выполнение программы - для этого в приложениях используется
многопоточность, которая реализованы с помощью классов "Runnable" и "Thread".
- Но когда используется многопоточность, в приложениях теряется целостность данных при доступе к общему рессурсу данных. И чтобы
сохранить целостность данных для общих рессурсов в многопоточных приложениях - для этого применяется механизм синхронизации
(synchronized).
- Недостатком такого механизма синхронизации (synchronized) является низкая скорость обработки данных с общим рессурсом (по той причине
что часть задач периодически приостанавливается, но в целом многопоточные приложения работают намного быстрее...) и понижения стабильности
работы программы по причине появления возможных взаимных блокировок (deadlock).
Поэтому чтобы обеспечить надежность для работы многопоточных приложений (исключить возможные ситуации взаимных блокировок) применяются:
"Мютексы" и "Симафоры" (Mutex, Semafor).
- Но "Мютексы" и "Симафоры" обычно используются для работы с примитивными типами данных (и для разработки больших программ со сложными
типами данных, например списки, они все еще очень сложны в применении...). Поэтому для таких целей существуют стандартные библиотечные
классы "Concurrent", которые можно легко применять для реализации больших задач со стандартными списками (сложных) данных.
- Но даже при использовании стандартных библиотечных классов "Concurrent" для многопоточных приложениях наблюдаются утери в многопоточных
процессах. Все дело в том, что разные процессы тратят разное врремя на выполнения своих задач, и очень часто наблюдаются случаи
когда часть завершенных процессов простаивает, в то время когда другие процессы еще работают - неэффективное распределение нагрузки
на многопоточные задачи... Это особенно ощутимо при обработки большого объема данных где время измеряется в часах. Имеено для таких
целей существуют другие более эффективные библиотеки-фреймворки: "Hadoop/MapReduce", "Fork/Join" (которые уже распределяют нагрузку
между многопоточными процессами...).
   Недостаток всех таких библиотечных фреймворков в том что они используются только для конкретного-единичного случая, потому-что он реализован на низком уровне.
И каждая его функция прошла уже многолетнюю проверку, для их применения в современных программах. Такой подход есть очень неэффнетивным и сложным.

3))) Высокоуровневые элементы
Современные программы разрабатываются только на основе использования (высокоуровневых) библиотек языка прграммирования.

- Дело в том что все эти библиотечные классы и фреймворки обычно работают со стандартными типами данных (примитивные типы, списки...).
   А что делать в случаях когда нужно использовать (нестандартный) свой-специфический (сложный) тип объектов-данных, например: объекты игры.
Поэтому для таких целей существует техгология "MPI" (Message Passing Interface) для параллельныого вычисления - когда процессы,
обменивающиеся сообщениями. Такая "MPI" технология позволяет более надежно синхронизировать процессы в многопоточных приложениях
(избежать взаимных блокировок), и самое главное позволяет гибко работать с самыми разными (нестандартными) типами сложных объектов.
   Технологии типа "MPI", "OpenMP" они реализованы уже на высоком уровне и являются более простыми для применения...
(На базе такой технологии существуют даже специально разрабатываемые библиотеки для решения самых разных задач, например, математические пакеты: от поставщика Mathworks
"MATLAB", "LabVIEW")
............................................................................................................................................................................
                               (Шаблон проектирования или паттерн) http://ru.wikipedia.org/wiki/Шаблон_проектирования#.D0.9E.D1.81.D0.BD.D0.BE.D0.B2.D0.BD.D1.8B.D0.B5
          (32-шаблона, в том числе 23-шаблона используемых в Java)
(Применение шаблонов Java. Библиотека профессионала - Стелтинг С.) http://bulletinsite.net/index.php?id1=6&category=programmer&author=stelting-s&book=2002&page=96
                                (http://ooad.asf.ru/Patterns.aspx) http://ooad.asf.ru/Patterns.aspx
                       (Шпаргалка по 23-х шаблонов проектирования) http://habrahabr.ru/post/210288/

Виды паттернов:
1. Основные (fundamental):
   - ()........Delegation...................."Делегирование"
   - ()........Interface....................."Интерфейс"
   - ()........Abstract Superclass..........."Абстрактный суперкласс"
   - ()........Interface and Abstract Class.."Интерфейс и абстрактный класс"
   - ()........Immutable....................."Неизменный"
   - ()........Marker Interface.............."Маркер-интерфейс"
   - (~).......Ргоху........................."Заместитель"
2. Порождающие (creational - создают объекты):
   - (java 1)..Singleton....................."Одиночка"
   - (java 2)..FactoryMethod................."Фабричный метод"
   - (java 3)..AbstractFactory..............."Абстрактная фабрика"
   - (c++  4)..Builder......................."Строитель"
3. Распределения обязанностей:
   - (~).......Composite....................."Компоновщик"
4. Структурные (structural - они изменяют структуру уже готового созданого объекта):
   - (java 4)..Decorator....................."Декоратор"
   - (java 5)..Adapter......................."Адаптер"
   - (java 6)..Facade........................"Фасад"
   - (c++  2)..Proxy........................."Заместитель"
   - (c++  3)..Composite....................."Компоновщик"
   - ()........Iterator......................"Итератор"
   - ()........Bridge........................"Мост"
   - ()........Ayweight......................"Приспособленец"
   - ()........Dynamic Linkage..............."Динамическая компоновка"
   - ()........Virtual Proxy................."Виртуальный заместитель"
   - ()........Cache Management.............."Упрамение кэшем"
5. Поведенческие (behavioral):
   - (java 7)..Observer......................"Наблюдатель"
   - (java 8)..State........................."Состояние"
   - (java 9)..Strategy......................"Стратегия"
   - (c++  1)..Command......................."Команда"
   - ()........Chain of Responsibility......."llепочка ответственности"
   - ()........Mediator......................"Посредник"
   - ()........Null Object..................."Нулевой объект"
   - ()........Template Method..............."Метод шаблона"
   - ()........Visitor......................."Посетитель"
6. Для конкурирующих операций:
   - ()........Single Threaded Execution....."Однопоточное выполнение"
   - ()........Lock Object..................."Объект блокировки"
   - ()........Scheduler....................."Планировшик"
   - ()........Reducer Consumer.............."Производитель-потребитель"
7. Системные:
   - ()........Model-View-Controller (MVC)..."Модель-Вид-Контроллер"
   - ()........Session......................."Session Facade"
   - (~).......Worker Thread................."для улучшение пропускной способности и минимизация средней задержки при реализации параллельного выполнения"
   - ()........Callback......................"Обратный вызов"






*   (Паттерны ООП в метафорах) http://habrahabr.ru/post/136766/
*   (Шаблоны проектирования: основы велосипедостроения) http://www.slideshare.net/custisppt/ss-24614208
*   (Шаблоны проектирования. Строитель) http://icoder.ucoz.ru/blog/builder/2013-05-21-26
*   (Шпаргалка по шаблонам проектирования) http://habrahabr.ru/post/210288/

*** (Логические задачи.) http://sh2533.blogspot.com/

Шаблоны параллельного выполнения:
    (Описание паттерна) http://www.pvsm.ru/programmirovanie/17622
*   (Что такое MapReduce?) http://mrnone.blogspot.com/2011/12/mapreduce.html
                           http://swsys.ru/index.php?page=article&id=2247
*   (Параллельная реализация алгоритма обнаружения лиц) http://www.interactiverobotics.org/?p=98
                                                        http://www.interactiverobotics.org/?p=39
                                                        http://ru.wikipedia.org/wiki/MapReduce
                                                        http://akka.io/downloads/
                                                        http://www.myshared.ru/slide/687301/#
    (Параллельное выполнение в java. Шаблон Worker Thread) http://life-prog.ru/view_programs.php?id=49&language=java&page=1
    (Обзор java.util.concurrent) http://habrahabr.ru/company/luxoft/blog/157273/
    (Что такое Fork/Join? И с чем его едят?) http://www.1024cores.net/home/in-russian/cto-takoe-fork-join-i-s-cem-ego-edat
                                             https://toster.ru/q/23222


("Java_промышленное_программирование")
- Часть 1. ОСНОВЫ ЯЗЫКА JAVA
- Часть 2. ИСПОЛЬЗОВАНИЕ КЛАССОВ И БИБЛИОТЕК
- Часть 3. ТЕХНОЛОГИИ РАЗРАБОТКИ WEB-ПРИЛОЖЕНИЙ
- УКАЗАНИЯ И ОТВЕТЫ

"Шаблоны_проектирования_Java"
- r л а в а 4. Основные шаблоны проектирования
- r л а в а 5. Порождающие шаблоны проектирования
- r л а в а 6. Разделяющие шаблоны проектирования
- r л а в а 7. Структурные шаблоны проектирования
- r л а в а 8. Поведенческие шаблоны проектирования
- r л а в а 9. Шаблоны проектирования для конкурирующих операций

"Применение_шаблонов_Java" (Рассмотрено 32 шаблона, в том числе 23 шаблона, знание которых обязательно для сдачи экзамена на сертификат Sun Certified Enterprise Architect)
- ЧАСТЬ I . ОБЩЕУПОТРЕБИТЕЛЬНЫЕ ШАБЛОНЫ
-- Глава 1. Производящие шаблоны
-- Глава 2. Поведенческие шаблоны
-- Глава З. Структурные шаблоны
-- Глава 4. Системные шаблоны
- ЧАСТЬ П. ШАБЛОНЫ В ЯЗЫКЕ ПРОГРАММИРОВАНИЯ JAVA

("Обработка_вариаций_с_шаблонами_проектирования")

"Многопоточное_программирование_Java"
- Модели многопоточных вычислений:
-- Concurrency
-- MapReduce
-- Fork/Join - фреймворк для многопоточного программирования в Java 7 основанный на легковесных потоках (задачах).

"Проектирование_многопоточных_программ"
-- Процессы, обменивающиеся сообщениями


("Приёмы_параллельного_программирования_Java")
-- WorkManager API (JSR-237) - Средства параллельного программирования в J2EE

("Шаблон_параллельного_программирования_Т-подхода")
-- Модель Map-Reduce
-- стандарт MPI (Message Passing Interface)

("Введение_параллельные_вычисления")
-- Техгология MPI

(Основы_параллельных_вычислений)



Из оглавления (приведу только избранные разделы):
Глава 1. Дискретные системы
— Алгебра языков
— Конечные системы
— Многокомпонентные системы
— Автоматы
— Дискретные преобразователи
Глава 2 Алгоритмы
— Параллельные алгоритмы
Глава 3 Рекурсивные определения
Глава 4 Структуры данных
— Функциональные структуры данных
— Многоосновные структуры данных
Глава 5 Архитектура ЭВМ
— Не-неймовские ЭВМ
Глава 6 Проектирование последовательных программ
Глава 7 Распределенные многопроцессорные системы
— Принцип макроконвейра
— Макроконвейерные сети
— Проектирование распределенных программ
— Динамическое распараллеливание посл.программ


>Порождающие паттерны
>Системные паттерны
>Структурные паттерны
>Паттерны распределения обязанностей
Паттерны домена
Паттерны слоя источника данных
>Паттерны моделирования поведения
>Паттерны для представления данных в Web (Системные)


http://www.intuit.ru/studies/courses/16/16/lecture/498?page=2
http://www.duct-tape-architect.ru/?p=294
http://www.dil.univ-mrs.fr/~massat/docs/hibernate-2/reference/ru/html_single/
http://javadev.ru/
http://elizarov.livejournal.com/18000.html
http://life-prog.ru/view_programs.php?id=49&language=java&page=1
http://ooad.asf.ru/Pattern.aspx?IdKat=7&IdPat=60
http://mrnone.blogspot.com/2011/12/mapreduce.html